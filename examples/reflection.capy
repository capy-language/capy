core :: #mod("core");
meta :: core.meta;
fmt  :: core.fmt; 

io   :: #import("io.capy");

imaginary :: distinct i32;

Foo :: struct {
    a: bool,
};

Person :: struct {
    name: str,
    age: i32,
};

Dessert :: enum {
    Ice_Cream,
    Chocolate_Cake | 2,
    Apple_Pie: struct {
        warm: bool,
        crumble: bool,
        crust_thickness: f64,
    }           | 10,
    Cookie: f32, // cookie temperature or something
    Brownie,
    Cheesecake  | 42,
    Pudding     | 45,
    Milkshake: struct {
        malt: bool,
    }
};

Farm_Animal :: enum {
    Cow,
    Sheep,
    Chicken,
    Pig,
};

main :: () {
    core.println("Reflection!\n");

    check_layouts();
    check_equality();
    check_type_info();
    check_any();
}

check_layouts :: () {
    print_type_layout("i32               ", i32);
    print_type_layout("i64               ", i64);
    print_type_layout("u64               ", u64);
    print_type_layout("i8                ", i8);
    print_type_layout("u128              ", u128);
    print_type_layout("usize             ", usize);
    print_type_layout("f32               ", f32);
    print_type_layout("void              ", void);
    print_type_layout("any               ", any);
    print_type_layout("rawptr            ", rawptr);
    print_type_layout("rawslice          ", rawslice);
    print_type_layout("str               ", str);
    print_type_layout("bool              ", bool);
    print_type_layout("char              ", char);
    print_type_layout("type              ", type);
    print_type_layout("Person            ", Person);
    print_type_layout("Foo               ", Foo);
    print_type_layout("[6] Person        ", [6] Person);
    print_type_layout("[ ] Person        ", [] Person);
    print_type_layout(" ^  Person        ", ^ Person);
    print_type_layout("distinct Person   ", distinct Person);
    print_type_layout("Dessert           ", Dessert);
    print_type_layout("Dessert.Brownie   ", Dessert.Brownie);
    print_type_layout("Dessert.Apple_Pie ", Dessert.Apple_Pie);
    print_type_layout("Dessert.Milkshake ", Dessert.Milkshake);
    print_type_layout("Farm_Animal       ", Farm_Animal);
    print_type_layout("Farm_Animal.Sheep ", Farm_Animal.Sheep);
    print_type_layout("()       -> void  ", () -> void);
    print_type_layout("(x: i32) -> f32   ", (x: i32) -> f32);
    print_type_layout("?i32              ", ?i32);
    print_type_layout("?^i32             ", ?^i32);

    // note that ?^i32 is internally represented by just a NULL pointer, meaning
    core.assert(meta.size_of(?^i32) == meta.size_of(^i32));
    // but this doesn't apply to other optional types
    core.assert(meta.size_of(?i32)  != meta.size_of(i32));

    core.println();
}

check_equality :: () {
    // types can be checked against each other at runtime.
    //
    // included for compiler testing.

    core.println("i32 == i16 : ", i32 == i16);
    core.println("i32 == u32 : ", i32 == u32);
    core.println("i32 == i32 : ", i32 == i32);
    core.println("Foo == Person : ", Foo == Person);
    core.println("Person == Person : ", Person == Person);
    core.println("[5] Person == [6] Person : ", [5] Person == [6] Person);
    core.println("[5] Foo == [5] Person : ", [5] Foo == [5] Person);
    core.println("[6] Person == [6] Person : ", [6] Person == [6] Person);
    core.println("^Person == ^Foo : ", ^Person == ^Foo);
    core.println("^Person == ^Person : ", ^Person == ^Person);

    d1Person :: distinct Person;
    d2Person :: distinct Person;

    core.println("Person == distinct 'a Person : ", Person == d1Person);
    core.println("distinct 'a Person == distinct 'b Person : ", d1Person == d2Person);
    core.println("distinct 'b Person == distinct 'b Person : ", d2Person == d2Person);
    
    core.println("Dessert == Farm_Animal : ", Dessert == Farm_Animal);
    core.println("Dessert == Dessert : ", Dessert == Dessert);

    // This compares the types of enum variants.
    
    // `Dessert.Apple_Pie` is a type, and this is comparing the type Apple_Pie to the type Cheesecake
    core.println("type.(Dessert.Apple_Pie) == type.(Dessert.Cheesecake) : ", Dessert.Apple_Pie == Dessert.Cheesecake);
    // `Dessert.Cheesecake` is a zero-sized type, and by default zero-sized types will refer to the singleton they represent.
    // So here, we explicitly tell the compiler we're trying to compare types and not values.
    core.println("type.(Dessert.Cheesecake) == type.(Dessert.Cheesecake) : ", type.(Dessert.Cheesecake) == type.(Dessert.Cheesecake));
    core.println("type.(Dessert.Ice_Cream) == type.(Dessert.Cheesecake) : ", type.(Dessert.Ice_Cream) == type.(Dessert.Cheesecake));
    // Since these are two variants of completely different enums, the compiler knows the only way this comparison will work
    // is if it treats the two variants as types.
    core.println("type.(Farm_Animal.Cow) == type.(Dessert.Ice_Cream) : ", Farm_Animal.Cow == Dessert.Ice_Cream);
    core.println("type.(Farm_Animal.Cow) == type.(Farm_Animal.Cow) : ", type.(Farm_Animal.Cow) == type.(Farm_Animal.Cow));
    core.println("type.(Farm_Animal.Cow) == type.(Farm_Animal.Sheep) : ", type.(Farm_Animal.Cow) == type.(Farm_Animal.Sheep));

    // This compares the actual values of enum variants.
    // I'm including this just to make sure that casting to a type doesn't affect enum comparison
    core.println("Dessert.Apple_Pie == Dessert.Cheesecake : ", Dessert.Apple_Pie.{ warm=true, crumble=false, crust_thickness=2.0 } == Dessert.Cheesecake);
    core.println("Dessert.Cheesecake == Dessert.Cheesecake : ", Dessert.Cheesecake == Dessert.Cheesecake);
    core.println("Dessert.Ice_Cream == Dessert.Cheesecake : ", Dessert.Ice_Cream == Dessert.Cheesecake);
    core.println("Farm_Animal.Cow == Farm_Animal.Cow : ", Farm_Animal.Cow == Farm_Animal.Cow);
    core.println("Farm_Animal.Cow == Farm_Animal.Sheep : ", Farm_Animal.Cow == Farm_Animal.Sheep);

    core.println("() -> void == (x : i32) -> f32 : ", () -> void == (x: i32) -> f32);
    core.println("() -> void == () -> void : ", () -> void == () -> void);

    core.println("?u64 == ?u64 : ", ?u64 == ?u64);
    core.println("?u64 == ?bool : ", ?u64 == ?bool);

    core.println();
}

check_type_info :: () {
    Bar :: struct {
        text: str,
        flag: bool,
        array: [3] i16,
    };

    print_info(i32);
    print_info(u8);
    print_info(u128);
    print_info(isize);
    print_info(f32);
    print_info(f64);
    print_info([5] i32);
    print_info([1000][3]f64);
    print_info([]i32);
    print_info(^i32);
    print_info(^^^i128);
    print_info(distinct i32);
    print_info(distinct [2] distinct i8);
    print_info(Foo);
    print_info(Bar);
    print_info(Person);
    print_info(any);
    print_info(distinct Foo);
    print_info(distinct Farm_Animal);
    print_info(Dessert);
    print_info(Dessert.Ice_Cream);
    print_info(Dessert.Apple_Pie);
    print_info(Dessert.Cookie);
    print_info(Dessert.Milkshake);
    print_info(?i16);
    print_info(?^bool);
}

check_any :: () {
    Bar :: struct {
        text: str,
        flag: bool,
        array: [3] i16,
    };

    // The `any` type contains a type id and an opaque pointer and
    // as a result, it can represent *any* possible value in your program.
    // `any` powers the `core.println` function, which uses the type id
    // to figure out how the data should be printed
    
    num : any = u8.(123);
    core.println(num);

    the_numbers : any = i32.[4, 8, 15, 16, 23, 42]; 
    core.println(the_numbers);

    one_two_three : any = u16.[1, 2, 3];
    core.println(one_two_three);

    retirement_age_ptr : any = ^(i128.(52));
    core.println(retirement_age_ptr);

    // `any` within `any` (for testing)
    
    the_answer : any = u64.(42);
    core.println(the_answer);
    core.println(core.any_from_raw_parts(^the_answer, any));

    // auto cast to `any`

    core.println(256);
    core.println("hello");
    core.println({});
    
    // printing types
    core.println(i32);
    core.println(^Bar);
    core.println(any);

    // printing arrays
    core.println(.[3, -1, 4, 1, 5, 9]);
    core.println([]i32.( .[4, 8, 15, 16, 23, 42] )); // forcefully cast the array to a slice (for testing)
    core.println(any.[1, "hello", true, 5.03]);

    // printing structs
    core.println(Bar.{
        text = "Hello",
        flag = false,
        array = i16.[1, 2, 3],
    });
    core.println(.{ // anonymous structs!
        hello = "world",
        foo = .{
            bar = .{
                baz = .{
                    qux = 1.2,
                }
            }
        }
    });

    // printing enums
    core.println(Dessert.Apple_Pie.{
        warm = true,
        crumble = false,
        crust_thickness = 1.3,
    });
    core.println(Dessert.Cookie.(1089.5));
    core.println(Dessert.Brownie); // todo: println should print `Brownie` instead of `()`
    core.println(Dessert.Cheesecake);
    core.println(Dessert.Milkshake.{
        malt = true,
    });
    // since `Dessert.Apple_Pie` is its own type, this will make sure that the value
    // is being stored in memory as an actual enum (Dessert), and not a struct (Dessert.Apple_Pie)
    core.println(Dessert.(Dessert.Apple_Pie.{
        warm = false,
        crumble = true,
        crust_thickness = 0.5,
    }));
    core.println(Dessert.(Dessert.Cookie.(30.0)));
    core.println(Dessert.(Dessert.Brownie.(())));
    core.println(Dessert.(Dessert.Cheesecake.(())));
    core.println(Dessert.(Dessert.Milkshake.{
        malt = false,
    }));

    // printing optionals
    core.println(nil);
    core.println(?u64.(nil));
    core.println(?u64.(42));
    core.println(?^i32.(^21)); // nullable pointers
    core.println(?^i32.(nil));

    // printing error unions
    core.println(str!u64.(0xFF));
    core.println(str!u64.("this is an error!!"));

    // formatting
    core.println(fmt.decimal(0x1a2b3c));
    core.println("0x", fmt.hex(0x1a2b3c));
    core.println("0b", fmt.binary(0x1a2b3c));
}

// == helper functions ==

print_type_layout :: (name: str, ty: type) {
    core.println(
        name,
        " (0x",
        fmt.hex(meta.meta_to_raw(ty)),
        ") : size = ",
        meta.size_of(ty),
        ", align = ",
        meta.align_of(ty),
        ", stride = ",
        meta.stride_of(ty)
    );
};

print_info :: (ty: type) {
    print_info_with_args(ty, 0);
    core.println("");
}

print_indent :: (indent: i32) {
    idx := 0;
    while idx < indent {
        core.libc.putchar(' ');
        idx += 1;
    }
};

print_info_with_args :: (ty: type, indent: i32) {
    print_front :: (indent: i32, values: ...any) {
        print_indent(indent);
        // TODO: add a spread operator like in JavaScript
        val_idx := 0;
        while val_idx < values.len {
            core.print(values[val_idx]);
            val_idx += 1;
        }
        core.println();
    };

    switch info in meta.get_type_info(ty) {
        .Int => {
            print_front(indent, "INT");
            print_front(indent, "bit_width = ", info.bit_width);
            print_front(indent, "signed    = ", if info.signed {
                "true"
            } else {
                "false"
            });
        },
        .Float => {
            print_front(indent, "FLOAT");
            print_front(indent, "bit_width = ", info.bit_width);
        },
        .Bool => print_front(indent, "BOOL"),
        .String => print_front(indent, "STRING"),
        .Char => print_front(indent, "CHARACTER"),
        .Array => {
            print_front(indent, "ARRAY");
            print_front(indent, "len = ", info.len);
            print_front(indent, "ty =");
            print_info_with_args(info.sub_ty, indent + 1);
        },
        .Slice => {
            print_front(indent, "SLICE");
            print_front(indent, "ty =");
            print_info_with_args(info.sub_ty, indent + 1);
        },
        .Pointer => {
            print_front(indent, "POINTER");
            print_front(indent, "ty =");
            print_info_with_args(info.sub_ty, indent + 1);
        },
        .Distinct => {
            print_front(indent, "DISTINCT");
            print_front(indent, "ty =");
            print_info_with_args(info.sub_ty, indent + 1);
        },
        .Struct => {
            print_front(indent, "STRUCT");
            print_front(indent, "members =");

            indent := indent + 1;

            idx := 0;
            while idx < info.members.len {
                member := info.members[idx];

                print_front(indent, "name = ", member.name);
                print_front(indent, "offset = ", member.offset);
                print_front(indent, "ty =");
                print_info_with_args(member.ty, indent + 1);

                idx += 1;
            }
        },
        .Enum => {
            print_front(indent, "ENUM");
            print_front(indent, "discriminant_offset = ", info.discriminant_offset);
            print_front(indent, "variants =");

            idx := 0;
            while idx < info.variants.len {
                variant := info.variants[idx];
                print_info_with_args(variant, indent + 1);

                idx += 1;
            }
        },
        .Variant => {
            print_front(indent, "VARIANT");
            print_front(indent, "discriminant = ", info.discriminant);
            print_front(indent, "ty =");
            print_info_with_args(info.sub_ty, indent + 1);
        },
        .Nil => print_front(indent, "NIL"),
        .Optional => {
            print_front(indent, "OPTIONAL");
            print_front(indent, "discriminant_offset = ", info.discriminant_offset);
            print_front(indent, "ty =");
            print_info_with_args(info.sub_ty, indent + 1);
        },
        .Error_Union => {
            print_front(indent, "ERROR_UNION");
            print_front(indent, "discriminant_offset = ", info.discriminant_offset);
            print_front(indent, "error_ty =");
            print_info_with_args(info.error_ty, indent + 1);
            print_front(indent, "payload_ty =");
            print_info_with_args(info.payload_ty, indent + 1);
        },
        .Function => print_front(indent, "FUNCTION"),
        .File => print_front(indent, "FILE"),
        .Meta_Type => print_front(indent, "META TYPE"),
        .Any => print_front(indent, "ANY"),
        .Raw_Ptr => {
            print_front(indent, "RAW_POINTER");
            print_front(indent, "mutable = ", info.mutable);
        },
        .Raw_Slice => print_front(indent, "RAW_SLICE"),
        .Void => print_front(indent, "VOID"),
    }
}
