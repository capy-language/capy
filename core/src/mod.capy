
// this is all going to change.
// `pub` is going to be added

fmt :: #import("fmt.capy");
libc :: #import("libc.capy");
math :: #import("math.capy");
mem :: #import("mem.capy");
meta :: #import("meta.capy");
ptr :: #import("ptr.capy");

list :: #import("structs/list.capy");
string_builder :: #import("structs/string_builder.capy");

// this gets populated with `argc` and `argv` just before `main` gets called
args : [] str : #builtin("commandline_args");

// for testing.
// exits the program if a check failed, and prints the specificed message
assert :: (condition: bool, message: ...any) {
    if !condition {
        _print_str("assertion failed");
        if message.len == 0 {
            libc.putchar('!');
        } else {
            _print_str(": ");
            idx := 0;
            while idx < message.len {
                print(message[idx]);
                idx += 1;
            }
        }
        libc.putchar('\n');
        libc.exit(1);
    }
}

// exits the program due to an unrecoverable state being reached,
// and prints the specificed message
panic :: (message: ...any) {
    _print_str("explicit panic");
    if message.len == 0 {
        libc.putchar('!');
    } else {
        _print_str(": ");
        idx := 0;
        while idx < message.len {
            print(message[idx]);
            idx += 1;
        }
    }
    libc.putchar('\n');
    libc.exit(1);
}

// exits the program due to an unexpected code path being reached.
// and prints the specificed message
unreachable :: (message: ...any) {
    _print_str("entered unreachable code");
    if message.len == 0 {
        libc.putchar('!');
    } else {
        _print_str(": ");
        idx := 0;
        while idx < message.len {
            print(message[idx]);
            idx += 1;
        }
    }
    libc.putchar('\n');
    libc.exit(1);
}

// exits the program due to unfinished code being reached,
// and prints the specificed message
todo :: (message: ...any) {
    _print_str("not yet implemented");
    if message.len == 0 {
        libc.putchar('!');
    } else {
        _print_str(": ");
        idx := 0;
        while idx < message.len {
            print(message[idx]);
            idx += 1;
        }
    }
    libc.putchar('\n');
    libc.exit(1);
}

any_from_raw_parts :: (data: rawptr, ty: type) -> any {
    Any :: struct {
        ty: type,
        data: rawptr,
    };

    raw := Any.{
        ty = ty,
        data = data,
    };

    // transmute Any to any using rawptr
    ^any.(rawptr.(^raw))^
}

// see `print`
println :: (values: ...any) {
    // we can't just do `print(values)` because then values will be passed in as a single slice, as opposed to multiple arguments.
    // TODO: add a spread operator like JavaScript
    val_idx := 0;
    while val_idx < values.len {
        print(values[val_idx]);
        val_idx += 1;
    }
    libc.putchar('\n');
}

_print_str :: (text: str) {
    // cast str to ^char
    text := ^char.(text);

    i := 0;
    loop {
        ch := char.(ptr.read(text, i));
        if ch == '\0' {
            break;
        }

        libc.putchar(ch);

        i += 1;
    }
}

// The print function uses the `any` type to print all possible values.
// You don't need to implement `Display` or `Debug`.
// Struct printing just works due to the reflection system.
print :: (values: ...any) {
    val_idx := 0;
    while val_idx < values.len {
        val := values[val_idx];

        ty := val.ty;
        data := val.ptr;

        switch info in meta.get_type_info(ty) {
            .Int => {
                str := if info.signed {
                    num := if info.bit_width == 8 {
                        i64.(^i8.(data)^)
                    } else if info.bit_width == 16 {
                        i64.(^i16.(data)^)
                    } else if info.bit_width == 32 {
                        i64.(^i32.(data)^)
                    } else if info.bit_width == 64 {
                        i64.(^i64.(data)^)
                    } else if info.bit_width == 128 {
                        i64.(^i128.(data)^)
                    } else {
                        unreachable();
                        0
                    };

                    fmt.int_to_string(fmt.decimal(num))
                } else {
                    num := if info.bit_width == 8 {
                        u64.(^u8.(data)^)
                    } else if info.bit_width == 16 {
                        u64.(^u16.(data)^)
                    } else if info.bit_width == 32 {
                        u64.(^u32.(data)^)
                    } else if info.bit_width == 64 {
                        u64.(^u64.(data)^)
                    } else if info.bit_width == 128 {
                        u64.(^u128.(data)^)
                    } else {
                        unreachable();
                        0
                    };

                    fmt.int_to_string(fmt.decimal_unsigned(num))
                };
                defer string_builder.free(^mut str);

                string_builder.print(^str);
            },
            .Float => {
                num := if info.bit_width == 32 {
                    f64.(^f32.(data)^)
                } else if info.bit_width == 64 {
                    f64.(^f64.(data)^)
                } else {
                    unreachable();
                    0
                };

                str := fmt.float_to_string(num);
                defer string_builder.free(^mut str);

                string_builder.print(^str);
            },
            .Bool => {
                if ^bool.(data)^ {
                    _print_str("true");
                } else {
                    _print_str("false");
                }
            },
            .String => _print_str(^str.(data)^),
            .Char => {
                libc.putchar(^char.(data)^);
            },
            .Array => {
                elem_stride := meta.stride_of(info.sub_ty);

                _print_str("[ ");

                idx := 0;
                while idx < info.len {
                    addr := ptr.const_offset(data, elem_stride * idx);
                    
                    print(any_from_raw_parts(addr, info.sub_ty));

                    if idx < info.len - 1 {
                        _print_str(", ");
                    }
                    
                    idx += 1;
                }

                _print_str(" ]");
            },
            .Slice => {
                elem_stride := meta.stride_of(info.sub_ty);

                slice := ^[] any.(data);
                len := slice.len;

                _print_str("[ ");

                idx := 0;
                while idx < len {
                    addr := ptr.const_offset(slice.ptr, elem_stride * idx);

                    print(any_from_raw_parts(addr, info.sub_ty));

                    if idx < len - 1 {
                        _print_str(", ");
                    }

                    idx += 1;
                }

                _print_str(" ]");
            },
            .Pointer => {
                _print_str("^");
                print(any_from_raw_parts(^rawptr.(data)^, info.sub_ty));
            },
            .Distinct => {
                print(any_from_raw_parts(data, info.sub_ty));
            },
            .Struct => `struct_blk: {
                if ty == fmt.Number_Formatting {
                    str := fmt.int_to_string(^fmt.Number_Formatting.(data)^);
                    defer string_builder.free(^mut str);

                    string_builder.print(^str);
                 
                    break `struct_blk;
                }
            
                _print_str("{ ");

                idx := 0;
                while idx < info.members.len {
                    member := info.members[idx];

                    _print_str(member.name);
                    _print_str(" = ");

                    addr := ptr.const_offset(data, member.offset);

                    print(any_from_raw_parts(addr, member.ty));

                    if idx < info.members.len - 1 {
                        _print_str(", ");
                    }
                    idx += 1;
                }

                _print_str(" }");
            },
            .Enum => {
                discriminant := ^u8.(ptr.const_offset(data, info.discriminant_offset))^;

                idx := 0;
                while idx < info.variants.len {
                    variant := info.variants[idx];

                    variant_info := switch v in meta.get_type_info(variant) {
                        .Variant => v,
                        _ => {
                            unreachable("all variants of the enum should be `Type_Info.Variant`");
                            meta.Type_Info.Variant.{sub_ty=void,discriminant=0}
                        },
                    };

                    if variant_info.discriminant == discriminant {
                        print(any_from_raw_parts(data, variant_info.sub_ty));
                        break;
                    }

                    idx += 1;
                }
            },
            .Variant => {
                print(any_from_raw_parts(data, info.sub_ty));
            },
            .Nil => _print_str("nil"),
            .Optional => {
                if info.is_non_zero {
                    assert(#is_variant(meta.get_type_info(info.sub_ty), meta.Type_Info.Pointer), info.sub_ty, " should be a pointer");

                    if ^usize.(data)^ == 0 {
                        _print_str("nil");
                    } else {
                        print(any_from_raw_parts(data, info.sub_ty));
                    }
                } else {
                    discriminant := ^u8.(ptr.const_offset(data, info.discriminant_offset))^;

                    if discriminant == 0 {
                        _print_str("nil");
                    } else if discriminant == 1 {
                        print(any_from_raw_parts(data, info.sub_ty));
                    } else {
                        panic("strange optional discriminant, ", discriminant);
                    }
                }
            },
            .Error_Union => {
                discriminant := ^u8.(ptr.const_offset(data, info.discriminant_offset))^;

                if discriminant == 0 {
                    print(any_from_raw_parts(data, info.error_ty));
                } else if discriminant == 1 {
                    print(any_from_raw_parts(data, info.payload_ty));
                } else {
                    panic("strange error union discriminant, ", discriminant);
                }
            },
            .Function => _print_str("{function}"),
            .File => _print_str("{import}"),
            .Meta_Type => {
                print_type_info(^type.(data)^);
            },
            .Any => {
                print(^any.(data)^);
            },
            .Raw_Ptr => _print_str("{rawptr}"),
            .Raw_Slice => {
                _print_str("[ {rawslice} ; ");

                data := ^rawslice.(data)^;
                print(data.len);

                _print_str(" ]");
            },
            .Void => _print_str("()"),
        }

        val_idx += 1;
    }
}

// prints a type id as a human readable string
print_type_info :: (ty: type) {
    switch info in meta.get_type_info(ty) {
        .Int => {
            if info.signed {
                libc.putchar('i');
            } else {
                libc.putchar('u');
            }

            str := fmt.int_to_string(fmt.decimal(info.bit_width));
            defer string_builder.free(^mut str);

            string_builder.print(^str);
        },
        .Float => {
            libc.putchar('f');

            str := fmt.int_to_string(fmt.decimal(info.bit_width));
            defer string_builder.free(^mut str);

            string_builder.print(^str);
        },
        .Bool => _print_str("bool"),
        .String => _print_str("str"),
        .Char => _print_str("char"),
        .Array => {
            libc.putchar('[');

            str := fmt.int_to_string(fmt.decimal(i64.(info.len)));
            defer string_builder.free(^mut str);
            string_builder.print(^str);

            libc.putchar(']');
            libc.putchar(' ');

            print_type_info(info.sub_ty);
        },
        .Slice => {
            _print_str("[] ");
            print_type_info(info.sub_ty);
        },
        .Pointer => {
            libc.putchar('^');
            print_type_info(info.sub_ty);
        },
        .Distinct => {
            _print_str("distinct ");
            print_type_info(info.sub_ty);
        },
        .Struct => {
            _print_str("struct { ");

            idx := 0;
            while idx < info.members.len {
                member := info.members[idx];

                _print_str(member.name);
                _print_str(": ");

                print_type_info(member.ty);

                if idx < info.members.len - 1 {
                    _print_str(", ");
                }
                idx += 1;
            }

            _print_str(" }");
        },
        .Enum => {
            _print_str("enum { ");

            idx := 0;
            while idx < info.variants.len {
                variant := info.variants[idx];

                // todo: maybe include the name of the variant here
                print_type_info(variant);

                if idx < info.variants.len - 1 {
                    _print_str(", ");
                }
                idx += 1;
            }

            _print_str(" }");
        },
        .Variant => {
            _print_str("variant ");
            print_type_info(info.sub_ty);

            _print_str(" | ");
            str := fmt.int_to_string(fmt.decimal(i64.(info.discriminant)));
            defer string_builder.free(^mut str);
            string_builder.print(^str);
        },
        .Nil => _print_str("nil"),
        .Optional => {
            _print_str("?");
            print_type_info(info.sub_ty);
        },
        .Error_Union => {
            print_type_info(info.error_ty);
            _print_str("!");
            print_type_info(info.payload_ty);
        },
        .Function => _print_str("{function type}"),
        .File => _print_str("{import}"),
        .Meta_Type => _print_str("type"),
        .Any => _print_str("any"),
        .Raw_Ptr => if info.mutable {
            _print_str("mut rawptr")
        } else {
            _print_str("rawptr")
        },
        .Raw_Slice => _print_str("rawslice"),
        .Void => _print_str("void"),
    }
}

// gets the length of a string.
// strings in Capy are not slices yet,
// and so are all null terminated like C.
str_len :: (s: str) -> usize {
    // cast str to ^u8
    s_ptr := ^u8.(s);

    idx := 0;
    loop {
        ch := ptr.read(s_ptr, idx);

        if ch == 0 { break; }

        idx += 1;
    }

    idx
}

// casts an `any` into the specificied memory.
// the buffer must have enough space for `expected`.
//
// this is more than just a memcpy, it casts `value`
// as needed so that the resulting type is `expected`.
//
// Think of this as a runtime version of `type.(value)`.
//
// `into` must be large enough to hold `expected`
//
// todo: add more tests for this function, it is probably very incomplete
cast_into :: (value: any, expected: type, into: mut rawptr) -> any {
    found_ty := value.ty;
    found_data := value.ptr;

    if found_ty == expected {
        libc.memcpy(into, found_data, meta.size_of(found_ty));
        return any_from_raw_parts(into, expected);
    }

    // unwrap distincts
    expected := expected;
    `l: loop {
        switch info in meta.get_type_info(expected) {
            .Distinct => {
                expected = info.sub_ty;
            },
            .Variant => {
                expected = info.sub_ty;
            },
            _ => {
                // todo break expressions
                break `l;
            },
        }
    }

    // do actual casting
    switch from_info in meta.get_type_info(found_ty) {
        .Int => {
            num := if from_info.bit_width == 8 {
                u64.(^u8.(found_data)^)
            } else if from_info.bit_width == 16 {
                u64.(^u16.(found_data)^)
            } else if from_info.bit_width == 32 {
                u64.(^u32.(found_data)^)
            } else if from_info.bit_width == 64 {
                u64.(^u64.(found_data)^)
            } else if from_info.bit_width == 128 {
                u64.(^u128.(found_data)^)
            } else {
                unreachable();
                0
            };

            switch into_info in meta.get_type_info(expected) {
                .Int => {
                    // int -> int
                    if into_info.bit_width == 8 {
                        ^mut u8.(into) ^= u8.(num);
                    } else if into_info.bit_width == 16 {
                        ^mut u16.(into) ^= u16.(num);
                    } else if into_info.bit_width == 32 {
                        ^mut u32.(into) ^= u32.(num);
                    } else if into_info.bit_width == 64 {
                        ^mut u64.(into) ^= u64.(num);
                    } else if into_info.bit_width == 128 {
                        ^mut u128.(into) ^= u128.(num);
                    } else {
                        unreachable();
                    }       
                },
                .Float => {
                    // int -> float
                    if into_info.bit_width == 32 {
                        ^mut f32.(into) ^= f32.(num);
                    } else if into_info.bit_width == 64 {
                        ^mut f64.(into) ^= f64.(num);
                    } else {
                        unreachable();
                    }
                },
                .Bool => {
                    ^mut bool.(into) ^= bool.(num);
                },
                .Char => {
                    ^mut char.(into) ^= char.(num);
                },
                _ => todo("only supports int -> int, int -> float, int -> bool, int -> char")
            }
        },
        .Float => {
            num := if from_info.bit_width == 32 {
                f64.(^f32.(found_data)^)
            } else if from_info.bit_width == 64 {
                f64.(^f64.(found_data)^)
            } else {
                unreachable();
                0
            };

            switch into_info in meta.get_type_info(expected) {
                .Int => {
                    // float -> int
                    if into_info.bit_width == 8 {
                        ^mut u8.(into) ^= u8.(num);
                    } else if into_info.bit_width == 16 {
                        ^mut u16.(into) ^= u16.(num);
                    } else if into_info.bit_width == 32 {
                        ^mut u32.(into) ^= u32.(num);
                    } else if into_info.bit_width == 64 {
                        ^mut u64.(into) ^= u64.(num);
                    } else if into_info.bit_width == 128 {
                        ^mut u128.(into) ^= u128.(num);
                    } else {
                        unreachable();
                    }       
                },
                .Float => {
                    // float -> float
                    if into_info.bit_width == 32 {
                        ^mut f32.(into) ^= f32.(num);
                    } else if into_info.bit_width == 64 {
                        ^mut f64.(into) ^= f64.(num);
                    } else {
                        unreachable();
                    }
                },
                .Bool => {
                    ^mut bool.(into) ^= bool.(num);
                },
                .Char => {
                    ^mut char.(into) ^= char.(num);
                },
                _ => todo("only supports float -> int, float -> float, float -> bool, and float -> char")
            }
        },
        .Bool => {
            value := ^bool.(found_data)^;

            switch into_info in meta.get_type_info(expected) {
                .Int => {
                    // bool -> int
                    if into_info.bit_width == 8 {
                        ^mut u8.(into) ^= u8.(value);
                    } else if into_info.bit_width == 16 {
                        ^mut u16.(into) ^= u16.(value);
                    } else if into_info.bit_width == 32 {
                        ^mut u32.(into) ^= u32.(value);
                    } else if into_info.bit_width == 64 {
                        ^mut u64.(into) ^= u64.(value);
                    } else if into_info.bit_width == 128 {
                        ^mut u128.(into) ^= u128.(value);
                    } else {
                        unreachable();
                    }       
                },
                .Float => {
                    // bool -> float
                    if into_info.bit_width == 32 {
                        ^mut f32.(into) ^= f32.(value);
                    } else if into_info.bit_width == 64 {
                        ^mut f64.(into) ^= f64.(value);
                    } else {
                        unreachable();
                    }
                },
                .Bool => {
                    // bool -> bool
                    ^mut bool.(into) ^= bool.(value);
                },
                .Char => {
                    // bool -> char
                    ^mut char.(into) ^= char.(value);
                },
                _ => todo("only supports bool -> int, bool -> float, bool -> bool, and bool -> char")
            }
        },
        .String => {
            assert(
                found_ty == expected,
                "the string type can only be cast to itself",
            );
            ^mut usize.(into) ^= (^usize).(found_data)^;
        },
        .Char => {
            value := ^bool.(found_data)^;

            switch into_info in meta.get_type_info(expected) {
                .Int => {
                    // char -> int
                    if into_info.bit_width == 8 {
                        ^mut u8.(into) ^= u8.(value);
                    } else if into_info.bit_width == 16 {
                        ^mut u16.(into) ^= u16.(value);
                    } else if into_info.bit_width == 32 {
                        ^mut u32.(into) ^= u32.(value);
                    } else if into_info.bit_width == 64 {
                        ^mut u64.(into) ^= u64.(value);
                    } else if into_info.bit_width == 128 {
                        ^mut u128.(into) ^= u128.(value);
                    } else {
                        unreachable();
                    }       
                },
                .Float => {
                    // char -> float
                    if into_info.bit_width == 32 {
                        ^mut f32.(into) ^= f32.(value);
                    } else if into_info.bit_width == 64 {
                        ^mut f64.(into) ^= f64.(value);
                    } else {
                        unreachable();
                    }
                },
                .Bool => {
                    // char -> bool
                    ^mut bool.(into) ^= bool.(value);
                },
                .Char => {
                    // char -> char
                    ^mut char.(into) ^= char.(value);
                },
                _ => todo("only supports char -> int, char -> float, char -> bool, and char -> char"),
            }
        },
        .Array => {
            switch into_info in meta.get_type_info(expected) {
                .Array => {
                    // array -> array
                    // todo: this can be much better
                    assert(from_info.sub_ty == into_info.sub_ty, "array -> array must have the same sub type");
                    libc.memcpy(into, found_data, meta.size_of(found_ty));
                },
                .Slice => {
                    // array -> slice
                    assert(from_info.sub_ty == into_info.sub_ty, "array -> slice must have the same sub type");
                    ^mut rawslice.(into) ^= ptr.slice_from_raw_parts(found_data, from_info.len);
                },
                _ => todo("only supports array -> array and array -> slice"),
            }
        },
        .Slice => {
            switch into_info in meta.get_type_info(expected) {
                .Array => {
                    // slice -> array
                    // todo: this can be much better
                    assert(from_info.sub_ty == into_info.sub_ty, "slice -> array must have the same sub type");
                    libc.memcpy(into, found_data, meta.stride_of(into_info.sub_ty) * ^rawslice.(found_data).len);
                },
                .Slice => {
                    // slice -> slice
                    assert(from_info.sub_ty == into_info.sub_ty, "slice -> slice must have the same sub type");
                    ^mut rawslice.(into) ^= ^rawslice.(found_data)^;
                },
                _ => todo("only supports slice -> array and slice -> slice"),
            }
        },
        .Raw_Slice => {
            switch into_info in meta.get_type_info(expected) {
                .Array => {
                    // slice -> array
                    // todo: this can be much better
                    libc.memcpy(into, found_data, meta.size_of(into_info.sub_ty) * ^rawslice.(found_data).len);
                },
                .Slice => {
                    // slice -> slice
                    ^mut rawslice.(into) ^= (^rawslice).(found_data)^;
                },
                _ => todo("only supports slice -> array and slice -> slice"),
            }
        },
        .Pointer => {
            ^mut usize.(into) ^= (^usize).(found_data)^;
        },
        .Raw_Ptr => {
            ^mut usize.(into) ^= (^usize).(found_data)^;
        },
        .Distinct => {
            cast_into(
                any_from_raw_parts(
                    found_data,
                    from_info.sub_ty,
                ),
                expected,
                into
            );    
        },
        .Struct => {
            assert(
                found_ty == expected,
                "struct types can only be casted to themselves",
            );
            libc.memcpy(into, found_data, meta.size_of(found_ty));
        },
        .Enum => {
            assert(
                found_ty == expected,
                "enum types can only be casted to themselves",
            );
            libc.memcpy(into, found_data, meta.size_of(found_ty));
        },
        .Variant => {
            switch into_info in meta.get_type_info(expected) {
                .Enum => {
                    libc.memcpy(into, found_data, meta.size_of(found_ty));

                    discrim := ^mut u8.(ptr.mut_offset(into, into_info.discriminant_offset));

                    discrim ^= u8.(from_info.discriminant);
                },
                _ => {
                    cast_into(
                        any_from_raw_parts(
                            found_data,
                            from_info.sub_ty,
                        ),
                        expected,
                        into
                    );
                }
            }
        },
        .Nil => {
            assert(
                found_ty == expected,
                "function types can only be casted to themselves",
            );
            assert(meta.size_of(found_ty) == 0);
            // do nothing :)
        },
        .Optional => {
            assert(
                found_ty == expected,
                "optional types can only be casted to themselves",
            );
            libc.memcpy(into, found_data, meta.size_of(found_ty));
        },
        .Error_Union => {
            assert(
                found_ty == expected,
                "error union types can only be casted to themselves",
            );
            libc.memcpy(into, found_data, meta.size_of(found_ty));
        },
        .Function => {
            assert(
                found_ty == expected,
                "function types can only be casted to themselves",
            );
            ^mut usize.(into) ^= (^usize).(found_data)^;
        },
        .File => {
            assert(
                found_ty == expected,
                "file types can only be casted to themselves",
            );
            assert(meta.size_of(found_ty) == 0);
            // do nothing :)
        },
        .Meta_Type => {
            assert(
                found_ty == expected,
                "type ids can only be casted to themselves",
            );
            ^mut type.(into) ^= (^type).(found_data)^;
        },
        .Any => {
            assert(
                found_ty == expected,
                "the any type can only be cast to itself",
            );
            assert(meta.size_of(found_ty) == 0);
            // do nothing :)
        },
        .Void => {
            assert(
                found_ty == expected,
                "the void type can only be cast to itself",
            );
            assert(meta.size_of(found_ty) == 0);
            // do nothing :)
        },
    }

    any_from_raw_parts(into, expected)
}

// todo: make this a comptime parameter
type_of :: (val: any) -> type {
    val.ty
}

