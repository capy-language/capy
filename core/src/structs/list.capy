core :: #mod("core");
ptr :: core.ptr;
libc :: core.libc;
math :: core.math;

// A dynamically allocated List type that is generic at runtime.
//
// This, and Runtime Generics in general, has been largely inspired by the blog post
// [A Simple Yet Useful Version of Generics by Luna Razzaghipour](https://blog.xoria.org/simple-generics/)
List :: struct {
    ty: type,
    buf: ?mut rawptr,
    cap: usize,
    len: usize,
};

make :: (ty: type) -> List {
    List.{
        ty = ty,
        buf = nil,
        cap = 0,
        len = 0,
    }
}

make_with_capacity :: (ty: type, cap: usize) -> List {
    if cap == 0 { return make(ty); }

    raw_cap :: cap * core.meta.stride_of(ty);

    if raw_cap < cap || raw_cap < core.meta.stride_of(ty) {
        core.panic("overflow when trying to allocate the backing array of a list");
    }

    buf := ?^mut char.(libc.malloc(raw_cap));

    if cap > 0 && buf == nil {
        core.panic("Error allocating the List");
    }

    List.{
        ty = ty,
        buf = buf,
        len = 0,
        cap = cap,
    }
}

free :: (self: ^mut List) {
    libc.free(self.buf);
    // to make sure the list isn't accidentally used after free
    self.cap = 0;
    self.len = 0;
}

push :: (list: ^mut List, value: any) {
    _grow_by(list, 1);

    // we just grew the list so this is safe
    buf := #unwrap(list.buf);

    offset := ptr.mut_offset(buf, list.len * core.meta.stride_of(list.ty));

    core.cast_into(value, list.ty, offset);

    list.len = list.len + 1;
}

get :: (list: ^List, index: usize) -> any {
    if index >= list.len {
        core.panic("called `get` with an index outside the list");
    }

    core.any_from_raw_parts(
        ptr.const_offset(#unwrap(list.buf), index * core.meta.stride_of(list.ty)),
        list.ty,
    )
}

// todo: return the item
pop :: (list: ^mut List) {
    if list.len == 0 {
        core.panic("cannot pop from an empty list");
    }

    list.len = list.len - 1;
}

print :: (list: ^List) {
    ty_stride := core.meta.stride_of(list.ty);

    core.print("[ ");

    idx := 0;
    while idx < list.len {
        // if we're in this loop, the buffer can't be nil
        buf := #unwrap(list.buf);

        core.print(core.any_from_raw_parts(
            ptr.const_offset(buf, idx * ty_stride),
            list.ty,
        ));

        idx += 1;
        
        if idx < list.len {
            core.print(", ");
        }
    }

    core.print(" ]");
}

println :: (list: ^List) {
    print(list);
    core.print('\n');
}

to_slice :: (list: ^List) -> rawslice {
    switch buf in list.buf {
        mut rawptr => ptr.slice_from_raw_parts(buf, list.len),
        nil => ptr.empty_slice(),
    }
}

_grow_by :: (list: ^mut List, len: usize) {
    if list.len + len > list.cap {
        new_cap := math.max_usize(list.cap * 2, 1);
        new_cap = math.max_usize(
            math.next_pow_of_two(list.len + len), 
            new_cap
        );

        ty_stride := core.meta.stride_of(list.ty);

	new_cap_raw :: new_cap * ty_stride;

	if new_cap_raw < new_cap || new_cap_raw < ty_stride {
	    core.panic("overflow when trying to grow list");
	}
	
        new_buf := ?^mut char.(libc.realloc(list.buf, new_cap_raw));
        if new_buf == nil {
            core.panic("Error reallocating the List");
        }

        list.buf = #unwrap(new_buf);
        list.cap = new_cap;
    }
}
